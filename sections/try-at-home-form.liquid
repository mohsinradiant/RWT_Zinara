<div class="page-width popup-content-tah">
  <div class="content-1-tah">
    <h2 class="section-heading">Selected Products</h2>
    <span class="content-1-tah-sub_heading">Great Choice!</span>
    <div class="selected-products-container">
      <p id="loadingMessage">Loading product...</p>
      <div id="productCardContainer" style="display: none;">
        <!-- Product details will be inserted here -->
      </div>
      <script>
        document.addEventListener('DOMContentLoaded', function () {
          // Function to get query parameter value
          function getQueryParam(param) {
            const params = new URLSearchParams(window.location.search);
            return params.get(param);
          }

          const productHandle = getQueryParam('product_handle');

          if (productHandle) {
            // Fetch product details using product handle
            fetch(`/products/${productHandle}.js`)
              .then((response) => {
                if (!response.ok) {
                  throw new Error('Product not found');
                }
                return response.json();
              })
              .then((product) => {
                // Build product card
                const productCardContainer = document.getElementById('productCardContainer');
                productCardContainer.innerHTML = `
                    <div class="product-card">
                      <img
                        src="${product.featured_image}"
                        alt="${product.title}"
                        class="product-card__image"
                      >
                      <div class="product-card-content">
                      <h2 class="product-card__title">${product.title}</h2>
                      <p class="product-card__price">
                        â‚¹${Math.floor(product.price / 100)}
                      </p>
                      </div>
                    </div>
                  `;
                document.getElementById('loadingMessage').style.display = 'none';
                productCardContainer.style.display = 'block';
              })
              .catch((error) => {
                console.error(error);
                document.getElementById('loadingMessage').textContent = 'Product not found or invalid handle provided.';
              });
          } else {
            document.getElementById('loadingMessage').textContent = 'No product handle provided in the URL.';
          }
        });
      </script>
    </div>
  </div>
  <div class="content-2-tah">
    <div class="tryAtHomePopup-input_container_parent">
      <div class="tryAtHomePopup-input_container">
        <h2>Add Address</h2>
        <div style="width:100%" class="input-group">
          <input type="text" id="house" class="input-field" placeholder="House/Apartment">
        </div>
        <div style="width:100%" class="input-group">
          <input type="text" id="locality" class="input-field" placeholder="Locality/Area/Landmark">
        </div>
        <div style="width:100%" class="input-group row">
          <input style="width: calc(50% - 5px);" type="text" id="city" class="input-field" placeholder="City">
          <input style="width: calc(50% - 5px);" type="text" id="state" class="input-field" placeholder="State">
        </div>
        <div style="width:100%" class="input-group">
          <input type="text" id="pincode" class="input-field" placeholder="Pincode">
        </div>

        {% unless customer.phone %}
          <h2>Phone</h2>
          <div style="width:100%" class="input-group">
            <input type="number" id="phone" class="input-field" placeholder="Phone">
          </div>
        {% endunless %}
        {% unless customer.email %}
          <h2>Email</h2>
          <div style="width:100%" class="input-group">
            <input type="email" id="email" class="input-field" placeholder="Email">
          </div>
        {% endunless %}
      </div>
      {% assign unavailable_slots = '' %}

      {% for slot in shop.metaobjects.try_at_home_slot.values %}
        {% assign unavailable_slots = unavailable_slots | append: slot.slot_date_and_time | append: ',' %}
      {% endfor %}
      <div class="tryAtHomePopup-input_container">
        <label for="date">Select Date:</label>
        <div class="date-container"></div>
        <!-- Empty container for dates -->

        <label for="timeslot">Select Timeslot:</label>
        <div class="timeslot-container"></div>
        <!-- Empty container for timeslots -->
      </div>

      <!-- Product Variant -->
      <input type="hidden" id="selectedProductVariant" value="{{ product.selected_or_first_available_variant.id }}">
      <div style="display:none;" class="tryAtHomePopup-input_container">
        <label for="productVariant">Product Variant:</label>
        <input
          type="text"
          id="productVariant"
          class="input-field"
          readonly
          value="{{ product.selected_or_first_available_variant.title }}"
          placeholder="Selected Product Variant"
        >
      </div>
    </div>
    <a id="bookTrialTah" class="submit-btn">Book Trial at Home</a>
  </div>
  <div class="content-3-tah"></div>
</div>
<div id="ajax_tah_succ_submit_popup_container" class="hidden">
  <div class="ajax_tah_succ_submit_popup">
    <p>Your Try at Home request has been successfully submitted!</p>
    <div class="button-group">
      <button id="ajax_tah_succ_submit_see_trials">See Booked Trials</button>
      <button id="ajax_tah_succ_submit_popup_close_bottom" class="close-bottom-right">Close</button>
    </div>
  </div>
</div>

<script>
  const unavailableSlots = {{ unavailable_slots | split: ',' | json }};
  document.addEventListener('DOMContentLoaded', function () {
    const dateContainer = document.querySelector('.date-container');
    const timeslotContainer = document.querySelector('.timeslot-container');
    
    // Clean and parse unavailable slots
    const cleanedUnavailableSlots = unavailableSlots
      .filter(slot => slot.trim() !== '') // Remove any empty strings
      .map(slot => {
        const date = new Date(slot.trim()); // Parse the datetime strings into Date objects
        const hours = String(date.getUTCHours()).padStart(2, '0'); // Get UTC hours
        const minutes = String(date.getUTCMinutes()).padStart(2, '0'); // Get UTC minutes
        return `${hours}:${minutes}`; // Return HH:MM format
      });

    // Debugging: Log cleaned unavailable times
    console.log('Cleaned Unavailable Times:', cleanedUnavailableSlots);

  // Generate Dates
  const today = new Date();
  for (let i = 0; i < 7; i++) {
  const futureDate = new Date();
  futureDate.setDate(today.getDate() + i);
  const options = { day: '2-digit', month: 'short', weekday: 'long' };
  const formattedDate = futureDate.toISOString().split('T')[0];
  const displayDate = futureDate.toLocaleDateString('en-US', options).split(',');

  const buttonHTML = `
    <button class="date-btn ${i === 0 ? 'selected' : ''}" data-date="${formattedDate}">
      ${displayDate[1]}<br>
      <span>${displayDate[0]}</span>
    </button>
  `;
  dateContainer.innerHTML += buttonHTML;
  }

    
    // Generate Timeslots
    let startTime = 10; // Start at 10:00 AM
    let startMinutes = 0;

    for (let i = 0; i < 18; i++) {
      const endMinutes = startMinutes + 30;
      const endTime = startTime + Math.floor(endMinutes / 60);
      const displayStart = `${String(startTime).padStart(2, '0')}:${String(startMinutes).padStart(2, '0')}`;
      const displayEnd = `${String(endTime % 24).padStart(2, '0')}:${String(endMinutes % 60).padStart(2, '0')}`;
      const timeslot = `${displayStart} - ${displayEnd}`;
      
      // Debugging: Log each generated timeslot and the comparison
      console.log('Checking Timeslot:', displayStart, 'Unavailable:', cleanedUnavailableSlots.includes(displayStart));
      
      if (!cleanedUnavailableSlots.includes(displayStart)) {
        // Render only if slot is available
        const buttonHTML = `<button class="timeslot-btn">${timeslot}</button>`;
        timeslotContainer.innerHTML += buttonHTML;
      }
      
      startTime += Math.floor((startMinutes + 30) / 60);
      startMinutes = (startMinutes + 30) % 60;
    }

    // Add click event listener to timeslot buttons
    timeslotContainer.addEventListener('click', function (event) {
      if (event.target.classList.contains('timeslot-btn')) {
        // Remove the 'selected' class from all timeslot buttons
        const allTimeslotButtons = timeslotContainer.querySelectorAll('.timeslot-btn');
        allTimeslotButtons.forEach(button => button.classList.remove('selected'));

        // Add the 'selected' class to the clicked button
        event.target.classList.add('selected');
      }
    });

    // Add click event listener to date buttons
    dateContainer.addEventListener('click', function (event) {
      if (event.target.classList.contains('date-btn')) {
        // Remove the 'selected' class from all date buttons
        const allDateButtons = dateContainer.querySelectorAll('.date-btn');
        allDateButtons.forEach(button => button.classList.remove('selected'));

        // Add the 'selected' class to the clicked button
        event.target.classList.add('selected');
      }
    });
  });
</script>

<script>
  // Submit Form
  document.getElementById('bookTrialTah').addEventListener('click', async () => {
    try {
      // Get selected date and time
      const activeDateBtn = document.querySelector('.date-btn.selected');
      const activeTimeBtn = document.querySelector('.timeslot-btn.selected');

      if (!activeDateBtn || !activeTimeBtn) {
        alert('Please select a date and time slot.');
        return;
      }

      const activeDate = activeDateBtn.getAttribute('data-date'); // Format: YYYY-MM-DD
      let activeTime = activeTimeBtn.getAttribute('data-time'); // Format: HH:mm

      // If data-time is not defined, fallback to extracting time from the button text
      if (!activeTime) {
        const timeText = activeTimeBtn.textContent.trim(); // e.g., "18:00 - 18:30"
        activeTime = timeText.split('-')[0].trim(); // Extract "18:00"
      }

      // Combine date and time into a single Date object
      const combinedDateTime = `${activeDate}T${activeTime}:00`;
      const timeslotLocal = new Date(combinedDateTime);

      if (isNaN(timeslotLocal.getTime())) {
        console.error('Invalid date or time:', { activeDate, activeTime, combinedDateTime });
        alert('Invalid date or time. Please select valid options.');
        return;
      }

      const ISTOffset = 5.5 * 60 * 60 * 1000; // IST offset in milliseconds
      const timeslotIST = new Date(timeslotLocal.getTime() + ISTOffset); // Adjust to IST
      const timeslot = timeslotIST.toISOString(); // Convert to ISO format

      // Other data fields
      const house = document.getElementById('house').value.trim();
      const locality = document.getElementById('locality').value.trim();
      const city = document.getElementById('city').value.trim();
      const state = document.getElementById('state').value.trim();
      const pincode = document.getElementById('pincode').value.trim();
      const address = `${house}, ${locality}, ${city}, ${state}`.replace(/,\s*$/, '');
      const productVariant = document.getElementById('selectedProductVariant').value;
      const phoneInput = document.getElementById('phone');
      const emailInput = document.getElementById('email');
      const phone = phoneInput ? phoneInput.value.trim() : "{{ customer.phone | default: '' }}";
      const email = emailInput ? emailInput.value.trim() : "{{ customer.email | default: '' }}";
      const customerId = "{{ customer.id | default: '' }}";
      const name = "{{ customer.first_name | default: '' }} {{ customer.last_name | default: '' }}".trim();

      if (!customerId) {
        alert('You must be logged in to book a slot.');
        return;
      }

      if (
        !timeslot ||
        !name ||
        !email ||
        !phone ||
        !house ||
        !locality ||
        !city ||
        !state ||
        !pincode ||
        !productVariant
      ) {
        alert('Please fill in all fields!');
        return;
      }

      const tryAtHomeData = {
        customer: customerId,
        timeslot,
        name,
        email,
        phone,
        address,
        pincode,
        product_variant: productVariant,
        slot_status: 'Slot Booked',
      };

      console.log('Final data being posted:', tryAtHomeData);

      const response = await fetch('https://www.learningtlms.in/Zever4u/shopify_customer.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(tryAtHomeData),
      });

      const rawResponse = await response.text();
      console.log('Raw Response:', rawResponse);

      const jsonResponse = JSON.parse(rawResponse);
      if (response.ok && jsonResponse.success) {
        // Get the popup container
        const popupContainer = document.getElementById('ajax_tah_succ_submit_popup_container');

        // Show the popup
        popupContainer.classList.remove('hidden');

        // Redirect to account page `.account_page_tah_trials` section on "See Booked Trials" button click
        document.getElementById('ajax_tah_succ_submit_see_trials').addEventListener('click', () => {
          window.location.href = '/account#account_page_tah_trials'; // Replace '/account' with your actual account page URL
        });

        // Close popup on "Close" button click
        document.getElementById('ajax_tah_succ_submit_popup_close_bottom').addEventListener('click', () => {
          popupContainer.classList.add('hidden');
        });
      } else {
        alert(`Submission failed: ${jsonResponse.message || 'Unknown error'}`);
      }
    } catch (error) {
      console.error('Error during submission:', error);
    }
  });

  // Handling Unavailable Timeslots
  (async () => {
    try {
      const response = await fetch('https://www.learningtlms.in/Zever4u/unavailable_timeslots.php');
      const unavailableSlotsUTC = await response.json(); // Assume server returns ISO strings in UTC

      const ISTOffset = 5.5 * 60 * 60 * 1000; // IST offset in milliseconds
      const unavailableSlotsIST = unavailableSlotsUTC.map((slot) => {
        const date = new Date(slot);
        const ISTDate = new Date(date.getTime() + ISTOffset); // Adjust to IST
        return ISTDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }); // Format in IST
      });

      console.log('Unavailable Timeslots (IST):', unavailableSlotsIST);
      // Update the UI as needed to display unavailable times
    } catch (error) {
      console.error('Error fetching unavailable timeslots:', error);
    }
  })();

  // Handling Unavailable Timeslots
  (async () => {
    try {
      const response = await fetch('https://www.learningtlms.in/Zever4u/unavailable_timeslots.php');
      const unavailableSlotsUTC = await response.json(); // Assume server returns ISO strings in UTC

      const unavailableSlotsLocal = unavailableSlotsUTC.map((slot) => {
        const date = new Date(slot);
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }); // Format in local time
      });

      console.log('Unavailable Timeslots (Local):', unavailableSlotsLocal);
      // Update the UI as needed to display unavailable times
    } catch (error) {
      console.error('Error fetching unavailable timeslots:', error);
    }
  })();
</script>

<style>
  .selected-products-container .product-card {
    display: flex;
    width: 49%;
    height: fit-content;
    background: #f4eeeb;
    border-radius: 10px 0 10px 0;
    padding: 10px;
    gap: 15px;
  }
  .selected-products-container .product-card h2,
  .selected-products-container .product-card p {
    margin: 0;
    color: #000;
  }
  .selected-products-container .product-card h2 {
    font-family: 'Quicksand';
    font-weight: 400;
    font-size: 2rem;
  }
  .selected-products-container .product-card p {
    font-size: 2.5rem;
  }
  .selected-products-container .product-card img {
    width: 130px;
    height: 130px;
    border-radius: 10px 0 10px 0;
  }
  .selected-products-container .product-card .product-card-content {
    display: flex;
    flex-direction: column;
    align-items: start;
    text-align: left;
    gap: 0px;
    padding: 15px 0;
    justify-content: space-between;
  }

  .content-1-tah .section-heading {
    margin-bottom: 0 !important;
  }
  .content-1-tah-sub_heading {
    background-color: #610c270d;
    color: #000;
    width: fit-content;
    padding: 4px 10px;
    font-size: 1.4rem;
    margin-top: 10px;
  }
  .content-1-tah {
    width: 100%;
    display: flex;
    flex-direction: column;
  }
  #ajax_tah_succ_submit_popup_container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }

  .ajax_tah_succ_submit_popup {
    background: white;
    padding: 20px;
    text-align: center;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.5);
    position: relative;
    width: 100%;
    max-width: 340px;
  }

  .ajax_tah_succ_submit_popup p {
    font-size: 1.6rem;
    font-family: 'Quicksand';
    color: #000;
    margin: 0 0 15px;
  }

  .button-group {
    display: flex;
    justify-content: center;
    gap: 10px;
  }

  .button-group button {
    padding: 10px 20px;
    font-size: 14px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }

  #ajax_tah_succ_submit_see_trials {
    background-color: #712242;
    color: white;
  }

  #ajax_tah_succ_submit_see_trials:hover {
    background-color: #71224250;
  }

  #ajax_tah_succ_submit_popup_close_bottom {
    background-color: transparent;
    color: #000;
    font-size: 14px;
    border: 1px solid #712242;
  }

  #ajax_tah_succ_submit_popup_close_bottom:hover {
    background-color: #f8f9fa;
  }

  input[type='number']::-webkit-inner-spin-button,
  input[type='number']::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  input[type='number'] {
    -moz-appearance: textfield; /* For Firefox */
  }

  .input-field:focus {
    outline: none;
    border-color: #610c270d;
  }
  .input-field::placeholder {
    color: #712242;
    opacity: 50%;
  }
  .tryAtHomePopup-input_container h2 {
    font-family: 'Playfair Display';
    font-size: 2rem;
    margin: 0 0 10px 0;
    font-weight: 500;
  }
  .tryAtHomePopup-input_container h2:not(:nth-of-type(1)) {
    margin-top: 20px;
  }

  .date-container,
  .timeslot-container {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
    flex-wrap: wrap;
  }

  .date-btn,
  .timeslot-btn {
    border: none;
    background-color: #f4eeeb;
    padding: 10px 17px;
    text-align: center;
    cursor: pointer;
    font-size: 14px;
    font-family: 'Quicksand';
    color: #333;
    font-weight: 500;
  }

  .date-btn span {
    display: block;
    font-size: 12px;
    font-weight: 400;
    color: #000;
  }

  .date-btn.selected,
  .date-btn.selected span,
  .timeslot-btn.selected {
    background-color: #712242;
    color: white;
  }

  .hidden {
    display: none;
  }
  .tryAtHomePopup-input_container_parent {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: start;
    row-gap: 1.3rem;
  }
  .popup-content-tah {
    position: relative;
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    width: 100%;
    text-align: center;
    height: fit-content;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    align-items: end;
  }

  .close-btn {
    margin-right: 5px;
    cursor: pointer;
    background: none;
    border: none;
    font-size: 3rem;
    font-weight: 100;
    line-height: 0;
    font-family: cursive;
  }

  .input-field,
  .calendar-input,
  .textarea-field {
    width: 100%;
    margin: 5px 0;
    padding: 10px;
    border: none;
    border-bottom: 1px solid #71224250;
    border-radius: 0;
    font-family: 'Quicksand';
    font-weight: 500;
  }

  .submit-btn {
    background: #712242;
    color: #fff;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    margin-top: 1.3rem;
    width: fit-content;
  }
  .tryAtHomePopup-input_container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: start;
    gap: 0;
    width: 49%;
  }
  .tryAtHomePopup-input_container label {
    font-family: 'Quicksand';
    font-weight: 500;
    font-size: 1.6rem;
    letter-spacing: 0;
    margin-bottom: 10px;
    line-height: 1.3rem;
    color: #000;
  }

  .section-heading-tah-popup {
    font-family: 'Quicksand';
    font-size: 2.2rem;
    margin: 0;
    font-weight: 600;
  }
  @media (max-width: 756px) {
    .tryAtHomePopup-input_container_parent {
      flex-direction: column;
    }
    .tryAtHomePopup-input_container {
      width: 100%;
    }
    .popup-content-tah {
      max-width: 85%;
    }
    .try-at-home-button-sticky {
      width: 49%;
    }
    .sticky-atc-container div {
      width: 49%;
    }
    .sticky-atc-container div .product-form__buttons {
      width: 100%;
    }
    .sticky-atc-container div .product-form__buttons button {
      width: 100%;
    }
  }
</style>

{% schema %}
{
  "name": "Try At Home",
  "settings": [],
  "blocks": [],
  "presets": [
    {
      "name": "Try At Home"
    }
  ]
}
{% endschema %}
