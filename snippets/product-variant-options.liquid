{% comment %}
  Renders product variant options

  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.
  - picker_type: {String} type of picker to dispay


  Usage:
  {% render 'product-variant-options',
    product: product,
    option: option,
    block: block
    picker_type: picker_type
  %}
{% endcomment %}
{%- liquid
  assign product_form_id = 'product-form-' | append: section.id
-%}
{%- for value in option.values -%}
  {%- liquid
    assign swatch_focal_point = null
    if value.swatch.image
      assign image_url = value.swatch.image | image_url: width: 50
      assign swatch_value = 'url(' | append: image_url | append: ')'
      assign swatch_focal_point = value.swatch.image.presentation.focal_point
    elsif value.swatch.color
      assign swatch_value = 'rgb(' | append: value.swatch.color.rgb | append: ')'
    else
      assign swatch_value = null
    endif

    assign option_disabled = true
    if value.available
      assign option_disabled = false
    endif
  -%}
  {%- capture input_id -%}
    {{ section.id }}-{{ option.position }}-{{ forloop.index0 -}}
  {%- endcapture -%}
  {%- capture input_name -%}
    {{ option.name }}-{{ option.position }}
  {%- endcapture -%}
  {%- capture input_dataset -%}
    data-product-url="{{ value.product_url }}"
    data-option-value-id="{{ value.id }}"
  {%- endcapture -%}
  {%- capture label_unavailable -%}
    <span class="visually-hidden label-unavailable">
      {{- 'products.product.variant_sold_out_or_unavailable' | t -}}
    </span>
  {%- endcapture -%}
  {%- if picker_type == 'swatch' -%}
    {%- capture help_text -%}
      <span class="visually-hidden">{{ value | escape }}</span>
      {{ label_unavailable }}
    {%- endcapture -%}
    {%
      render 'swatch-input',
      id: input_id,
      name: input_name,
      value: value | escape,
      swatch: value.swatch,
      product_form_id: product_form_id,
      checked: value.selected,
      visually_disabled: option_disabled,
      shape: block.settings.swatch_shape,
      help_text: help_text,
      additional_props: input_dataset
    %}
  {%- elsif picker_type == 'button' -%}
    <input
      type="radio"
      id="{{ input_id }}"
      name="{{ input_name | escape }}"
      value="{{ value | escape }}"
      form="{{ product_form_id }}"
      {% if value.selected %}
        checked
      {% endif %}
      {% if option_disabled %}
        class="disabled"
      {% endif %}
      {{ input_dataset }}
    >
    <label for="{{ input_id }}">
      {{ value -}}
      {{ label_unavailable }}
    </label>
  {%- elsif picker_type == 'dropdown' or picker_type == 'swatch_dropdown' -%}
    <option
      id="{{ input_id }}"
      value="{{ value | escape }}"
      {% if value.selected %}
        selected="selected"
      {% endif %}
      {% if swatch_value and picker_type == 'swatch_dropdown' %}
        data-option-swatch-value="{{ swatch_value }}"
        {% if swatch_focal_point %}
          data-option-swatch-focal-point="{{ swatch_focal_point }}"
        {% endif %}
      {% endif %}
      {{ input_dataset }}
    >
      {% if option_disabled -%}
        {{- 'products.product.value_unavailable' | t: option_value: value -}}
      {%- else -%}
        <span class="Variant-type-label">{{ option.name }}</span>: {{ value }}
      {%- endif %}
    </option>
  {%- endif -%}
{%- endfor -%}
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const selectors = document.querySelectorAll('select');

    selectors.forEach((select) => {
      let previousValue = select.value;

      select.addEventListener('change', function () {
        const newValue = this.value;
        const selectLabel = this.closest('.product-form__input')?.querySelector('label')?.innerText.trim();

        if (!selectLabel) return;

        const isMetal = /metal\s*type/i.test(selectLabel);
        const isSize = /^size$/i.test(selectLabel);

        if (!isMetal && !isSize) return;

        // Fetch variant from Shopify object or from DOM (fallback)
        const selectedVariant =
          window.product?.variants?.find((v) => v.options && v.options.includes(newValue)) || null;

        const currentVariant =
          window.product?.variants?.find((v) => v.options && v.options.includes(previousValue)) || null;

        const customer = window.customer || {};
        const address = customer.default_address || {};

        const eventData = {
          event_type: isMetal ? 'metal_type_click' : 'size_click',
          option_label: selectLabel,
          previous_value: previousValue,
          new_value: newValue,
          current_variant: currentVariant
            ? {
                id: currentVariant.id,
                title: currentVariant.title,
                price: currentVariant.price,
                sku: currentVariant.sku,
              }
            : null,
          selected_variant: selectedVariant
            ? {
                id: selectedVariant.id,
                title: selectedVariant.title,
                price: selectedVariant.price,
                sku: selectedVariant.sku,
              }
            : null,
          customer_id: customer.id || null,
          customer_email: customer.email || null,
          customer_name: `${customer.first_name || ''} ${customer.last_name || ''}`.trim(),
          customer_phone: customer.phone || null,
          customer_address: `${address.address1 || ''}, ${address.city || ''}, ${address.province || ''}, ${
            address.zip || ''
          }, ${address.country || ''}`.trim(),
          source_url: window.location.href,
          page_title: document.title,
        };

        gtag('event', eventData.event_type, eventData);
        console.log(`${eventData.event_type} sent with:`, eventData);

        // Update previous value
        previousValue = newValue;
      });
    });
  });
</script>
